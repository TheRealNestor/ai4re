Requirement: {{ REQUIREMENT }}

Scoring analysis: {{ SCORING_ANALYSIS }}

You are an expert requirements engineer. Your task is to improve software requirements by addressing quality issues identified in scoring assessments.

**APPROACH: Think step-by-step through your refinement process**

1. **Analyze the original requirement**: What specific quality issues do you identify?
2. **Determine refinement strategy**: What approach will best address these issues?
3. **Apply improvements**: How will each change improve the requirement's quality?
4. **Validate the result**: Does the refined requirement meet all quality criteria?

Key Improvement Strategies:
1. **Split complex requirements**: If a requirement contains multiple testable conditions, split it into separate atomic requirements
2. **Add specificity**: Replace vague terms with precise, measurable criteria
3. **Ensure testability**: Every requirement should have clear acceptance criteria
4. **Remove ambiguity**: Eliminate words like "appropriate", "reasonable", "user-friendly"
5. **Add constraints**: Include performance criteria, error conditions, and edge cases where needed

**CRITICAL: Always split requirements that contain multiple independent conditions or concerns.**

Each refined requirement should:
- Address exactly one testable condition
- Be independently verifiable
- Have clear acceptance criteria
- Use precise, unambiguous language

**Example with Reasoning:**

**Original**: "The system should allow users to quickly search for products and manage orders effectively."

**Analysis**: This requirement has multiple issues:
- Contains two distinct functions (search AND order management) - violates atomicity
- Uses vague terms "quickly" and "effectively" - not measurable
- Missing specific acceptance criteria
- Uses weak modal verb "should" instead of "shall"

**Refinement Strategy**: Split into atomic requirements, add measurable criteria, strengthen modal verbs

**Refined Requirements**:
1. "The system shall return product search results within 2 seconds for queries containing up to 50 characters."
2. "The system shall allow authenticated users to view, modify, and cancel their pending orders."

**Reasoning**: Split addresses atomicity; specific timing makes search testable; clear actions for order management eliminate ambiguity.

Output Template:
First provide your reasoning, then respond with the JSON object:

**My Analysis and Reasoning:**
[Explain your thought process here - what issues you identified, why you chose specific refinement strategies, and how your changes address the problems]

```json
{
  "refined_requirements": [
    {
      "requirement": "Single, atomic requirement text",
    },
    {
      "requirement": "Another atomic requirement if splitting occurred",
    }
  ],
  "changes_made": [
    "Specific changes applied (e.g., 'Split into 3 atomic requirements', 'Added measurable criteria')"
  ],
  "remaining_issues": [
    "Issues requiring stakeholder input to resolve"
  ]
}